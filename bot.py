#!/usr/bin/env python3
# coding: utf-8

import telebot
from telebot import types
import os
from dotenv import load_dotenv
load_dotenv()

TOKEN = os.getenv("TOKEN")
KEY_FILE = os.getenv("KEY_FILE")
USED_FILE = os.getenv("USED_FILE")
USER_DATA_FILE = os.getenv("USER_DATA_FILE")
OWNER_ID = int(os.getenv("OWNER_ID"))
CARD_NUMBER = os.getenv("CARD_NUMBER", "0000 0000 0000 0000")
CARD_HOLDER = os.getenv("CARD_HOLDER", "–ü–æ–ª—É—á–∞—Ç–µ–ª—å")
import json
from datetime import datetime, timedelta


# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===


bot = telebot.TeleBot(TOKEN)

# === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
def load_keys():
    return [line.strip() for line in open(KEY_FILE, "r", encoding="utf-8")] if os.path.exists(KEY_FILE) else []

def load_user_data():
    return json.load(open(USER_DATA_FILE, "r", encoding="utf-8")) if os.path.exists(USER_DATA_FILE) else {}

def save_user_data(data):
    with open(USER_DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

def get_free_vless_link():
    if not os.path.exists(KEY_FILE):
        return None
    all_keys = [line.strip() for line in open(KEY_FILE, "r", encoding="utf-8") if line.strip()]
    used_keys = [line.strip() for line in open(USED_FILE, "r", encoding="utf-8")] if os.path.exists(USED_FILE) else []
    free_keys = [k for k in all_keys if k not in used_keys]
    if not free_keys:
        return None
    selected = free_keys[0]
    with open(USED_FILE, "a", encoding="utf-8") as f:
        f.write(selected + "\n")
    return selected

def generate_vpn_keys(count):
    result = []
    for _ in range(count):
        link = get_free_vless_link()
        if link:
            result.append(link)
    return result


# === –°—Ç–∞—Ä—Ç ===
@bot.message_handler(commands=["start"])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton("‚úÖ –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø"),
        types.KeyboardButton("üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø"),
        types.KeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"),
        types.KeyboardButton("‚ùì –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç"),
        types.KeyboardButton("üìò FAQ"),
        types.KeyboardButton("üìú –ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
    )
    bot.send_message(message.chat.id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –Ω–∏–∂–µ:", reply_markup=markup)

    bot.send_message(
        message.chat.id,
        "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BlokaNet!*\n\n"
        "üåê –ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π VPN-—Å–µ—Ä–≤–∏—Å –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ, –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞.\n\n"
        "üîí –ö–∞–∂–¥—ã–π –ø–æ–ª—É—á–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∑–∞—â–∏—â—ë–Ω–Ω—ã–π –∫–ª—é—á\n"
        "‚ö°Ô∏è –ü—Ä–æ—Ç–æ–∫–æ–ª: *Xray REALITY*\n"
        "üì± Android, iOS, Windows, macOS, –º–æ–±–∏–ª—å–Ω—ã–µ —Å–µ—Ç–∏ ‚Äî –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç.",
        parse_mode="Markdown",
        reply_markup=markup
    )
    
@bot.message_handler(commands=["debugkey"])
def debug_key(message):
    link = get_free_vless_link()
    if link:
        bot.send_message(message.chat.id, f"‚úÖ test: `{link}`", parse_mode="Markdown")
    else:
        bot.send_message(message.chat.id, "‚ùå –Ω–µ—Ç –∫–ª—é—á–µ–π", parse_mode="Markdown")


@bot.message_handler(func=lambda msg: msg.text == "‚ùì –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç")
def how_it_works(message):
    caption = (
        "ü§î *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚Äî –ø–æ—à–∞–≥–æ–≤–æ:*\n\n"
        "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *¬´–ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø¬ª*\n"
        "2Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞\n"
        "3Ô∏è‚É£ –û–ø–ª–∞—Ç–∏—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω –ø–µ—Ä–µ–≤–æ–¥–∞\n"
        "4Ô∏è‚É£ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –æ–ø–ª–∞—Ç—É –∏ –≤—ã–¥–∞—Å—Ç –≤–∞–º VPN-–∫–ª—é—á\n\n"
        "üì≤ *–î–∞–ª—å–Ω–µ–π—à–∏–µ —à–∞–≥–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:*\n"
        "1Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ *Amnezia VPN* –∏–∑ Google Play –∏–ª–∏ App Store\n"
        "2Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ‚Üí –Ω–∞–∂–º–∏—Ç–µ *Let's get started*\n"
        "3Ô∏è‚É£ –í—Å—Ç–∞–≤—å—Ç–µ –≤—ã–¥–∞–Ω–Ω—ã–π –∫–ª—é—á –≤ –ø–æ–ª–µ\n"
        "4Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *Connect* ‚Äî –∏ VPN –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è\n\n"
        "üîí –í—Å—ë –ø—Ä–æ—Å—Ç–æ: –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ª–æ–≥–∏–Ω–æ–≤ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –≥–æ–ª–æ–≤–Ω–æ–π –±–æ–ª–∏\n"
        "üí¨ –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ: @BlokaNet"
    )

    with open("/root/logo.png", "rb") as photo:
        bot.send_photo(message.chat.id, photo, caption=caption, parse_mode="Markdown")

@bot.message_handler(content_types=["contact"])
def handle_contact(message):
    user_id = str(message.contact.user_id)
    phone = message.contact.phone_number
    users = load_user_data()
    users.setdefault(user_id, {})["phone"] = phone
    save_user_data(users)
    bot.send_message(message.chat.id, "üìû –ù–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å ¬´–ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø¬ª.", parse_mode="Markdown")

@bot.message_handler(func=lambda msg: msg.text == "‚úÖ –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø")
def buy_access(message):
    from datetime import datetime

    def has_tariff(packages, target_tariff):
        return any(pkg.get("tariff") == target_tariff for pkg in packages)

    user_id = str(message.from_user.id)
    username = message.from_user.username
    users = load_user_data()
    user_info = users.get(user_id, {})
    packages = user_info.get("packages", [])

    # üîò –§–æ—Ä–º–∏—Ä—É–µ–º –≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–æ–≤
    markup = types.InlineKeyboardMarkup()

    if not has_tariff(packages, "1"):
        markup.add(types.InlineKeyboardButton("üìç –ü–∞–∫–µ—Ç ‚Ññ1 ‚Äî 1 –∫–ª—é—á –∑–∞ 159‚ÇΩ", callback_data="start_new_tariff_1"))
    if not has_tariff(packages, "2"):
        markup.add(types.InlineKeyboardButton("üì¶ –ü–∞–∫–µ—Ç ‚Ññ2 ‚Äî 2 –∫–ª—é—á–∞ –∑–∞ 199‚ÇΩ", callback_data="start_new_tariff_2"))
    if not has_tariff(packages, "3"):
        markup.add(types.InlineKeyboardButton("üì¶ –ü–∞–∫–µ—Ç ‚Ññ3 ‚Äî 3 –∫–ª—é—á–∞ –∑–∞ 259‚ÇΩ", callback_data="start_new_tariff_3"))

    # –ï—Å–ª–∏ –≤—Å–µ —Ç—Ä–∏ —Ç–∞—Ä–∏—Ñ–∞ —É–∂–µ –ø–æ–∫—É–ø–∞–ª–∏—Å—å
    if not markup.to_dict().get("inline_keyboard"):
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –í—ã —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã.\n\nüõ† –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Ç–æ–ª—å–∫–æ *–ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å* –∏—Ö –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ *–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å*.",
            parse_mode="Markdown"
        )
        return

    # üìã –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤
    text = "*üíº –í–∞—à–∏ VPN-–ø–∞–∫–µ—Ç—ã:*\n\n"
    now = datetime.now()
    for i, pkg in enumerate(packages):
        tariff = pkg.get("tariff", "1")
        expires = pkg.get("expires", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
        try:
            exp = datetime.strptime(expires, "%Y-%m-%d")
            status = "‚úÖ –∞–∫—Ç–∏–≤–µ–Ω" if exp >= now else "üïí –∏—Å—Ç—ë–∫"
        except:
            status = "‚ùì –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

        name = (
            "–ü–∞–∫–µ—Ç ‚Ññ1 (1 –∫–ª—é—á üîë)" if tariff == "1" else
            "–ü–∞–∫–µ—Ç ‚Ññ2 (2 –∫–ª—é—á–∞ üîëüîë)" if tariff == "2" else
            "–ü–∞–∫–µ—Ç ‚Ññ3 (3 –∫–ª—é—á–∞ üîëüîëüîë)" if tariff == "3" else
            f"–ü–∞–∫–µ—Ç —Å —Ç–∞—Ä–∏—Ñ–æ–º `{tariff}`"
        )

        text += f"{name} ‚Üí —Å—Ä–æ–∫: `{expires}` ‚Äî {status}\n"

    text += "\nüìé –í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–æ—Ç —Ç–∞—Ä–∏—Ñ, –∫–æ—Ç–æ—Ä—ã–π –µ—â—ë *–Ω–µ –ø–æ–∫—É–ø–∞–ª—Å—è*.\n\n"
    text += "*1 üîë = 1 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ*\n\n"
    text += "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ç–∞—Ä–∏—Ñ –Ω–∏–∂–µ:"

    bot.send_message(
        message.chat.id,
        text,
        parse_mode="Markdown",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("tariff_"))
def select_tariff(call):
    user_id = str(call.from_user.id)
    tariff = call.data.split("_")[1]
    users = load_user_data()
    users.setdefault(user_id, {})["tariff"] = tariff
    save_user_data(users)

    price = "*159‚ÇΩ*" if tariff == "1" else "*259‚ÇΩ*" if tariff == "3" else "*–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ*"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üí≥ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="confirm_payment"))

    bot.send_message(
        call.message.chat.id,
        f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ: {price}\n\n"
        "üëâ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É –°–±–µ—Ä–±–∞–Ω–∫–∞:\n"
        f"`{CARD_NUMBER}`\n"
        f"üìç –ü–æ–ª—É—á–∞—Ç–µ–ª—å: `{CARD_HOLDER}`\n\n"
        "‚ùóÔ∏è –ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –ø–µ—Ä–µ–≤–æ–¥—É.",
        parse_mode="Markdown",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("approve_extend_"))
def approve_extension_package(call):
    print(f"üî• –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è: {call.data}")
    parts = call.data.split("_")
    user_id, index = parts[2], int(parts[3])
    users = load_user_data()
    now = datetime.now()

    if user_id not in users or index >= len(users[user_id].get("packages", [])):
        bot.send_message(call.message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –ø–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    package = users[user_id]["packages"][index]
    try:
        old_exp = datetime.strptime(package.get("expires", ""), "%Y-%m-%d")
        new_exp = old_exp + timedelta(days=30) if old_exp > now else now + timedelta(days=30)
    except:
        new_exp = now + timedelta(days=30)

    package["expires"] = new_exp.strftime("%Y-%m-%d")

    # üëÅ –ü–æ–ª—É—á–∞–µ–º —Ç–∞—Ä–∏—Ñ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π
    tariff = package.get("tariff", "1")
    count = 3 if tariff == "3" else 1

    # üéØ –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    for i, p in enumerate(users[user_id]["packages"]):
        p["active"] = (i == index)

    save_user_data(users)

    # üì© –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    identity = users[user_id].get("username", user_id)

    bot.send_message(
        int(user_id),
        f"‚úÖ –í–∞—à –ø–∞–∫–µ—Ç #{index} –ø—Ä–æ–¥–ª—ë–Ω!\nüîê –¢–∞—Ä–∏—Ñ: `{tariff}`\nüìÜ –î–æ: `{new_exp.strftime('%Y-%m-%d')}`",
        parse_mode="Markdown"
    )
    bot.send_message(
        call.message.chat.id,
        f"üîÅ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ: `{identity}` ‚Üí #{index}\nüì¶ –¢–∞—Ä–∏—Ñ: `{tariff}`\nüîê –ö–ª—é—á–µ–π: {count}\nüìÜ –î–æ: `{new_exp.strftime('%Y-%m-%d')}`",
        parse_mode="Markdown"
    )

    
@bot.message_handler(func=lambda msg: msg.text == "üîÅ –ü—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø")
def extend_access(message):
    from datetime import datetime

    def is_package_expired(pkg):
        try:
            expires = datetime.strptime(pkg.get("expires", "1970-01-01"), "%Y-%m-%d")
            return expires < datetime.now()
        except:
            return True

    user_id = str(message.from_user.id)
    users = load_user_data()

    packages = users.get(user_id, {}).get("packages", [])
    if not packages:
        bot.send_message(
            message.chat.id,
            "üîê –£ –≤–∞—Å –Ω–µ—Ç VPN-–ø–∞–∫–µ—Ç–æ–≤.\n–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ *–∫—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø*.\n\nüëâ –ù–∞–∂–º–∏—Ç–µ ¬´–ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø¬ª.",
            parse_mode="Markdown"
        )
        return

    # üîç –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–∞–∫–µ—Ç
    try:
        latest_index = max(
            range(len(packages)),
            key=lambda i: datetime.strptime(packages[i].get("expires", "1970-01-01"), "%Y-%m-%d")
        )
    except:
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç. –ù–∞–ø–∏—à–∏—Ç–µ /admin.",
            parse_mode="Markdown"
        )
        return

    package = packages[latest_index]
    expires_str = package.get("expires", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
    tariff = package.get("tariff", "1")

    # üí≥ –¶–µ–Ω–∞ –ø–æ —Ç–∞—Ä–∏—Ñ—É
    price = "259‚ÇΩ" if tariff == "3" else "199‚ÇΩ" if tariff == "2" else "159‚ÇΩ"

    # üßæ –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏
    try:
        expires = datetime.strptime(expires_str, "%Y-%m-%d")
        now = datetime.now()
        if expires > now:
            days_left = (expires - now).days
            msg = (
                f"üîê –í–∞—à —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: `{tariff}` –∫–ª—é—á(–µ–π)\n"
                f"‚è≥ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: `{expires_str}` (*–µ—â—ë {days_left} –¥–Ω.*)\n\n"
                f"üí¨ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã *{price}* –æ–Ω –±—É–¥–µ—Ç –ø—Ä–æ–¥–ª—ë–Ω –Ω–∞ +30 –¥–Ω–µ–π."
            )
        else:
            msg = (
                f"‚åõ –¢–∞—Ä–∏—Ñ `{tariff}` –∏—Å—Ç—ë–∫ `{expires_str}`\n\n"
                f"üí¨ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã *{price}* –æ–Ω —Å–Ω–æ–≤–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–µ–Ω –Ω–∞ 30 –¥–Ω–µ–π."
            )
    except:
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è. –ù–∞–ø–∏—à–∏—Ç–µ /admin.",
            parse_mode="Markdown"
        )
        return

    # üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã
    msg += (
        "\n\n–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n"
        f"`{CARD_NUMBER}`\n"
        f"üìç –ü–æ–ª—É—á–∞—Ç–µ–ª—å: `{CARD_HOLDER}`\n"
        "‚ùóÔ∏è –ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –ø–µ—Ä–µ–≤–æ–¥—É."
    )

    # üîò –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton(
            "üí≥ –Ø –æ–ø–ª–∞—Ç–∏–ª",
            callback_data=f"extend_confirm_{user_id}_{latest_index}"
        )
    )

    bot.send_message(message.chat.id, msg, parse_mode="Markdown", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "confirm_payment")
def confirm_payment(call):
    user_id = str(call.from_user.id)
    users = load_user_data()

    selected_tariff = users.get(user_id, {}).get("tariff", "1")
    users.setdefault(user_id, {})["tariff"] = selected_tariff
    save_user_data(users)

    price = "259‚ÇΩ" if selected_tariff == "3" else "159‚ÇΩ"
    requisites = (
        f"üí∞ *–û–ø–ª–∞—Ç–∞: {price}*\n\n"
        "üí≥ *–†–µ–∫–≤–∏–∑–∏—Ç—ã:*\n"
        f"–°–±–µ—Ä–±–∞–Ω–∫: `{CARD_NUMBER}`\n"
        f"üìç –ü–æ–ª—É—á–∞—Ç–µ–ª—å: `{CARD_HOLDER}`\n"
        "‚ùóÔ∏è –ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –ø–µ—Ä–µ–≤–æ–¥—É."
    )
    bot.send_message(user_id, requisites, parse_mode="Markdown")

    bot.send_message(
        user_id,
        "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ *—Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞* —Å—é–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n"
        "–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ ‚Äî –ø–æ–ª—É—á–∏—Ç–µ VPN-–∫–ª—é—á.",
        parse_mode="Markdown"
    )
    
@bot.callback_query_handler(func=lambda call: call.data == "start_new_purchase")
def start_new_package_purchase(call):
    user_id = str(call.from_user.id)
    users = load_user_data()
    users.setdefault(user_id, {})["purchase_mode"] = "new"  # üëà –º–µ—Ç–∫–∞: —ç—Ç–æ –Ω–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞
    save_user_data(users)

    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("üìç –¢–∞—Ä–∏—Ñ 1 –∫–ª—é—á ‚Äî 159‚ÇΩ", callback_data="new_tariff_1"),
        types.InlineKeyboardButton("üì¶ –¢–∞—Ä–∏—Ñ 3 –∫–ª—é—á–∞ ‚Äî 259‚ÇΩ", callback_data="new_tariff_3")
    )

    bot.send_message(
        call.message.chat.id,
        "üì¶ *–ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –Ω–æ–≤–æ–≥–æ VPN-–ø–∞–∫–µ—Ç–∞:",
        parse_mode="Markdown",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("start_new_tariff_"))
def handle_start_new_tariff(call):
    user_id = str(call.from_user.id)
    tariff = call.data.split("_")[-1]

    users = load_user_data()
    users.setdefault(user_id, {})["purchase_mode"] = "new"
    users[user_id]["tariff_temp"] = tariff
    save_user_data(users)

    # üí∞ –¶–µ–Ω–∞ –ø–æ —Ç–∞—Ä–∏—Ñ—É
    price = "259‚ÇΩ" if tariff == "3" else "199‚ÇΩ" if tariff == "2" else "159‚ÇΩ"

    # üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞
    pkg_name = (
        "–ü–∞–∫–µ—Ç ‚Ññ1 ‚Äî 1 –∫–ª—é—á üîë" if tariff == "1" else
        "–ü–∞–∫–µ—Ç ‚Ññ2 ‚Äî 2 –∫–ª—é—á–∞ üîëüîë" if tariff == "2" else
        "–ü–∞–∫–µ—Ç ‚Ññ3 ‚Äî 3 –∫–ª—é—á–∞ üîëüîëüîë"
    )

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üí≥ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="confirm_payment_new"))

    bot.send_message(
        call.message.chat.id,
        f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: *{pkg_name} ‚Üí {price}*\n\n"
        "üí≥ –û–ø–ª–∞—Ç–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É –°–±–µ—Ä–±–∞–Ω–∫–∞:\n"
        f"`{CARD_NUMBER}`\n"
        f"üìç –ü–æ–ª—É—á–∞—Ç–µ–ª—å: `{CARD_HOLDER}`\n"
        "‚ùóÔ∏è –ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –ø–µ—Ä–µ–≤–æ–¥—É.",
        parse_mode="Markdown",
        reply_markup=markup
    )
    
@bot.callback_query_handler(func=lambda call: call.data.startswith("new_tariff_"))
def select_new_tariff(call):
    user_id = str(call.from_user.id)
    tariff = call.data.split("_")[2]

    users = load_user_data()
    users.setdefault(user_id, {})["tariff_temp"] = tariff  # üëà –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ
    save_user_data(users)

    price = "259‚ÇΩ" if tariff == "3" else "159‚ÇΩ"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üí≥ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="confirm_payment_new"))

    bot.send_message(
        call.message.chat.id,
        f"‚úÖ –¢–∞—Ä–∏—Ñ –≤—ã–±—Ä–∞–Ω: `{tariff}` –∫–ª—é—á(–µ–π) ‚Üí *{price}*\n\n"
        "üí≥ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º:\n"
        f"`{CARD_NUMBER}`\n"
        f"üìç –ü–æ–ª—É—á–∞—Ç–µ–ª—å: `{CARD_HOLDER}`\n"
        "‚ùóÔ∏è –ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –ø–µ—Ä–µ–≤–æ–¥—É.",
        parse_mode="Markdown",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "confirm_payment_new")
def confirm_new_package_payment(call):
    user_id = str(call.from_user.id)
    users = load_user_data()

    selected_tariff = users.get(user_id, {}).get("tariff_temp", "1")
    users[user_id]["tariff_temp"] = selected_tariff
    save_user_data(users)

    bot.send_message(
        user_id,
        "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ *—Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞* —Å—é–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n"
        "–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ‚Äî –ø–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á–∏.",
        parse_mode="Markdown"
    )


@bot.message_handler(content_types=["photo"])
def handle_payment_photo(message):
    user_id = str(message.from_user.id)
    username = message.from_user.username or "unknown"
    now = datetime.now()

    # üìÇ –ü—É—Ç—å –¥–ª—è –ª–æ–≥–æ–≤
    folder = os.path.join("/root/payments/logs", now.strftime('%Y-%m/%d'), username)
    os.makedirs(folder, exist_ok=True)
    filename = f"{message.message_id}.jpg"
    filepath = os.path.join(folder, filename)

    # üì∏ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    try:
        file_info = bot.get_file(message.photo[-1].file_id)
        photo_data = bot.download_file(file_info.file_path)
        with open(filepath, "wb") as f:
            f.write(photo_data)
    except:
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∫—Ä–∏–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    if not os.path.exists(filepath) or os.path.getsize(filepath) == 0:
        bot.send_message(message.chat.id, "‚ùå –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–≤—Ä–µ–∂–¥—ë–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    users = load_user_data()
    user_info = users.get(user_id, {})
    has_packages = bool(user_info.get("packages"))
    purchase_mode = user_info.get("purchase_mode", "")
    meta_path = os.path.join(folder, "meta.json")

    # üß† –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∑–∞—è–≤–∫–∏
    if purchase_mode == "new":
        selected_tariff = user_info.get("tariff_temp", "1")
        key_count = "3" if selected_tariff == "3" else "2" if selected_tariff == "2" else "1"
        pkg_name = (
            "–ü–∞–∫–µ—Ç ‚Ññ1 (1 –∫–ª—é—á üîë)" if selected_tariff == "1" else
            "–ü–∞–∫–µ—Ç ‚Ññ2 (2 –∫–ª—é—á–∞ üîëüîë)" if selected_tariff == "2" else
            "–ü–∞–∫–µ—Ç ‚Ññ3 (3 –∫–ª—é—á–∞ üîëüîëüîë)"
        )
        callback_ok = f"approve_new_{user_id}"
        callback_fail = f"reject_new_{user_id}"
        caption_type = (
            f"üÜï –ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞\n"
            f"üì¶ {pkg_name}\n"
            f"üîê –û–∂–∏–¥–∞–µ—Ç—Å—è –≤—ã–¥–∞—á–∞: `{key_count}` –∫–ª—é—á–µ–π"
        )
        req_type = "purchase"

    elif has_packages:
        packages = user_info.get("packages", [])
        latest_index = int(user_info.get("last_package_index", 0))
        if latest_index >= len(packages):
            latest_index = len(packages) - 1
        current_package = packages[latest_index]
        tariff = current_package.get("tariff", "1")
        key_count = "3" if tariff == "3" else "2" if tariff == "2" else "1"

        pkg_name = (
            "–ü–∞–∫–µ—Ç ‚Ññ1 (1 –∫–ª—é—á üîë)" if tariff == "1" else
            "–ü–∞–∫–µ—Ç ‚Ññ2 (2 –∫–ª—é—á–∞ üîëüîë)" if tariff == "2" else
            "–ü–∞–∫–µ—Ç ‚Ññ3 (3 –∫–ª—é—á–∞ üîëüîëüîë)"
        )

        callback_ok = f"approve_extend_{user_id}_{latest_index}"
        callback_fail = f"reject_extend_{user_id}_{latest_index}"
        caption_type = f"üîÅ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ {pkg_name}"
        req_type = "extension"

    else:
        tariff = user_info.get("tariff", "1")
        key_count = "3" if tariff == "3" else "2" if tariff == "2" else "1"
        pkg_name = (
            "–ü–∞–∫–µ—Ç ‚Ññ1 (1 –∫–ª—é—á üîë)" if tariff == "1" else
            "–ü–∞–∫–µ—Ç ‚Ññ2 (2 –∫–ª—é—á–∞ üîëüîë)" if tariff == "2" else
            "–ü–∞–∫–µ—Ç ‚Ññ3 (3 –∫–ª—é—á–∞ üîëüîëüîë)"
        )
        callback_ok = f"approve_{user_id}"
        callback_fail = f"reject_{user_id}"
        caption_type = (
            f"üÜï –ü–æ–∫—É–ø–∫–∞\nüì¶ {pkg_name}\n"
            f"üîê –û–∂–∏–¥–∞–µ—Ç—Å—è –≤—ã–¥–∞—á–∞: `{key_count}` –∫–ª—é—á–µ–π"
        )
        req_type = "purchase"

    # üßæ meta.json
    entry = {
        "timestamp": now.strftime("%Y-%m-%d %H:%M:%S"),
        "filename": filename,
        "type": req_type,
        "status": "pending"
    }
    try:
        meta = []
        if os.path.exists(meta_path):
            with open(meta_path, "r", encoding="utf-8") as f:
                meta = json.load(f)
        meta.append(entry)
        with open(meta_path, "w", encoding="utf-8") as f:
            json.dump(meta, f, indent=2, ensure_ascii=False)
    except:
        pass

    # üì§ –ó–∞—è–≤–∫–∞ –∞–¥–º–∏–Ω—É
    caption = (
        f"{caption_type}\n\n"
        f"üë§ @{username}\n"
        f"üÜî `{user_id}`\n"
        f"üì∏ `{filename}`\n"
        f"üìÇ `{now.strftime('%Y-%m/%d')}/{username}`"
    )

    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=callback_ok),
        types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=callback_fail)
    )

    try:
        with open(filepath, "rb") as photo:
            bot.send_photo(OWNER_ID, photo, caption=caption, parse_mode="Markdown", reply_markup=markup)
        bot.send_message(message.chat.id, "‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∏–Ω—è—Ç. –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    except:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        
@bot.callback_query_handler(func=lambda call: call.data.startswith("reject_extend_"))
def reject_extension(call):
    parts = call.data.split("_")
    user_id, index = parts[2], parts[3]
    identity = bot.get_chat(user_id).username or user_id
    pkg_number = int(index) + 1  # üëà —Å–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º

    # üõë –ö–ª–∏–µ–Ω—Ç—É
    bot.send_message(
        int(user_id),
        f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ *–ü–∞–∫–µ—Ç–∞ ‚Ññ{pkg_number}* –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n"
        "üí¨ –ï—Å–ª–∏ —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤—Å—ë –≤–µ—Ä–Ω–æ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ: @BlokaNet",
        parse_mode="Markdown"
    )

    # üë§ –ê–¥–º–∏–Ω—É
    bot.send_message(
        call.message.chat.id,
        f"‚õîÔ∏è –ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ @{identity} *–ü–∞–∫–µ—Ç–∞ ‚Ññ{pkg_number}* –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.",
        parse_mode="Markdown"
    )

    # ‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ meta.json –∏ payments.json ‚Äî –ø–æ –∂–µ–ª–∞–Ω–∏—é
    
@bot.message_handler(func=lambda msg: msg.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
def show_profile_button(msg):
    user_profile(msg)  # –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è

@bot.callback_query_handler(func=lambda call: call.data.startswith("extend_confirm_"))
def confirm_extension_payment(call):
    parts = call.data.split("_")
    user_id = parts[2]
    package_index = int(parts[3])

    users = load_user_data()
    users.setdefault(user_id, {})["last_package_index"] = package_index
    users[user_id]["purchase_mode"] = "extend"
    save_user_data(users)

    packages = users.get(user_id, {}).get("packages", [])
    if not packages or package_index >= len(packages):
        bot.send_message(int(user_id), "‚ö†Ô∏è –ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ /admin.", parse_mode="Markdown")
        return

    current_package = packages[package_index]
    tariff = current_package.get("tariff", "1")

    # üí≥ –¶–µ–Ω–∞ –ø–æ —Ç–∞—Ä–∏—Ñ—É
    price = "259‚ÇΩ" if tariff == "3" else "199‚ÇΩ" if tariff == "2" else "159‚ÇΩ"

    # üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞
    pkg_name = (
        "–ü–∞–∫–µ—Ç ‚Ññ1 (1 –∫–ª—é—á üîë)" if tariff == "1" else
        "–ü–∞–∫–µ—Ç ‚Ññ2 (2 –∫–ª—é—á–∞ üîëüîë)" if tariff == "2" else
        "–ü–∞–∫–µ—Ç ‚Ññ3 (3 –∫–ª—é—á–∞ üîëüîëüîë)" if tariff == "3" else
        f"–ü–∞–∫–µ—Ç —Å —Ç–∞—Ä–∏—Ñ–æ–º `{tariff}`"
    )

    requisites = (
        f"üì¶ {pkg_name}\n"
        f"üí∞ *–û–ø–ª–∞—Ç–∞: {price}*\n\n"
        "üí≥ *–†–µ–∫–≤–∏–∑–∏—Ç—ã:*\n"
        f"–°–±–µ—Ä–±–∞–Ω–∫: `{CARD_NUMBER}`\n"
        f"üìç –ü–æ–ª—É—á–∞—Ç–µ–ª—å: `{CARD_HOLDER}`\n"
        "‚ùóÔ∏è –ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –ø–µ—Ä–µ–≤–æ–¥—É."
    )

    bot.send_message(int(user_id), requisites, parse_mode="Markdown")

    bot.send_message(
        int(user_id),
        "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ *—Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞* —Å—é–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n"
        "–ú—ã —Å–≤–µ—Ä–∏–º –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–¥–ª–µ–Ω–∏–µ.",
        parse_mode="Markdown"
    )
    
@bot.message_handler(func=lambda msg: msg.text == "üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø")
def trial_access(message):
    user_id = str(message.from_user.id)
    users = load_user_data()

    # üîê –ü—Ä–æ–≤–µ—Ä–∫–∞: —É–∂–µ –±—ã–ª –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø?
    for pkg in users.get(user_id, {}).get("packages", []):
        if pkg.get("tariff") == "trial":
            bot.send_message(
                message.chat.id,
                "‚õîÔ∏è –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø.\n\n"
                "üí¨ –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ.",
                parse_mode="Markdown"
            )
            return

    # ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞
    trial_keys = generate_vpn_keys(1)
    if not trial_keys:
        bot.send_message(
            message.chat.id,
            "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–±–Ω—ã—Ö –∫–ª—é—á–µ–π.\n–ù–∞–ø–∏—à–∏—Ç–µ: @BlokaNet",
            parse_mode="Markdown"
        )
        return

    expires = (datetime.now() + timedelta(days=3)).strftime("%Y-%m-%d")
    trial_package = {
        "tariff": "trial",
        "expires": expires,
        "vless": trial_keys
    }

    users.setdefault(user_id, {})["username"] = message.from_user.username or user_id
    users.setdefault(user_id, {}).setdefault("packages", []).append(trial_package)
    save_user_data(users)

    # üì© –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    text = (
        "üéÅ *–ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!*\n\n"
        f"üîë –í–∞—à –∫–ª—é—á:\n`{trial_keys[0]}`\n\n"
        f"‚è≥ *–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –¥–æ {expires}*\n\n"
        "üìò *–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è:*\n"
        "1Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ *Amnezia VPN*\n"
        "2Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –µ–≥–æ ‚Üí –Ω–∞–∂–º–∏—Ç–µ *Let's get started*\n"
        "3Ô∏è‚É£ –í—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á\n"
        "4Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ *Connect*\n\n"
        "üìå –ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –æ–¥–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ\n"
        "üí¨ –í–æ–ø—Ä–æ—Å—ã? –ù–∞–ø–∏—à–∏—Ç–µ: @BlokaNet"
    )

    bot.send_message(message.chat.id, text, parse_mode="Markdown")


@bot.callback_query_handler(func=lambda call: call.data.startswith("approve_") and not call.data.startswith("approve_extend_") and not call.data.startswith("approve_new_"))
def approve_payment(call):
    try:
        print(f"üì© –û–±—Ä–∞–±–æ—Ç–∫–∞ approve_payment: {call.data}")
        user_id = call.data.split("_")[1]
        chat = bot.get_chat(user_id)
        identity = chat.username or chat.first_name or user_id
        now = datetime.now()

        # üìÇ –ü—É—Ç—å –∫ –ª–æ–≥–∞–º
        folder = f"/root/payments/logs/{now.strftime('%Y-%m')}/{now.strftime('%d')}/{identity}"
        filename = sorted([f for f in os.listdir(folder) if f.endswith(".jpg")], reverse=True)[0]
        meta_path = os.path.join(folder, "meta.json")
        payments_log = "/root/payments/payments.json"

        # üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ meta.json
        try:
            meta = []
            if os.path.exists(meta_path):
                with open(meta_path, "r", encoding="utf-8") as f:
                    meta = json.load(f)
            meta.append({
                "timestamp": now.strftime("%Y-%m-%d %H:%M:%S"),
                "filename": filename,
                "type": "purchase",
                "status": "approved"
            })
            with open(meta_path, "w", encoding="utf-8") as f:
                json.dump(meta[-100:], f, indent=2, ensure_ascii=False)
            print(f"‚úÖ meta.json –æ–±–Ω–æ–≤–ª—ë–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è meta.json: {e}")

        # üìò –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ payments.json
        try:
            payments = []
            if os.path.exists(payments_log):
                with open(payments_log, "r", encoding="utf-8") as f:
                    payments = json.load(f)
            for p in reversed(payments):
                if p["user_id"] == user_id and p["status"] == "pending":
                    p["status"] = "approved"
                    break
            with open(payments_log, "w", encoding="utf-8") as f:
                json.dump(payments[-1000:], f, indent=2, ensure_ascii=False)
            print(f"‚úÖ payments.json –æ–±–Ω–æ–≤–ª—ë–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è payments.json: {e}")

        # üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π
        users = load_user_data()
        tariff = users.get(user_id, {}).get("tariff", "1")
        count = 3 if tariff == "3" else 2 if tariff == "2" else 1
        expires = (now + timedelta(days=30)).strftime("%Y-%m-%d")

        vless_links = []
        for _ in range(count):
            link = get_free_vless_link()
            if link:
                vless_links.append(link)

        if not vless_links:
            bot.send_message(int(user_id), "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö VPN-–∫–ª—é—á–µ–π. –ù–∞–ø–∏—à–∏—Ç–µ @BlokaNet.")
            bot.send_message(call.message.chat.id, f"‚ö†Ô∏è –£ @{identity} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª—é—á–µ–π.")
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –∫–ª—é—á–∏ ‚Äî —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
            return

        print(f"‚úÖ –í—ã–¥–∞—ë–º {len(vless_links)} –∫–ª—é—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

        # üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ user_keys.json
        new_package = {
            "tariff": tariff,
            "expires": expires,
            "vless": vless_links
        }

        users.setdefault(user_id, {})["username"] = identity
        users.setdefault(user_id, {}).setdefault("packages", []).append(new_package)
        save_user_data(users)
        print(f"‚úÖ user_keys.json –æ–±–Ω–æ–≤–ª—ë–Ω")

        # üìò –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        instructions = (
            "üìò *–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è:*\n"
            "1Ô∏è‚É£ –°–∫–∞—á–∞–π—Ç–µ *Amnezia VPN*\n"
            "2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ *Let's get started*\n"
            "3Ô∏è‚É£ –í—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á\n"
            "4Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ *Connect*\n\n"
            "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @BlokaNet"
        )

        # üì© –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        msg = "üéâ *–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!*\n\nüîë *–í–∞—à–∏ –∫–ª—é—á–∏:*\n\n"
        for idx, link in enumerate(vless_links, start=1):
            msg += f"üîë –ö–ª—é—á ‚Ññ{idx}:\n`{link}`\n\n"

        msg += f"‚è≥ *–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –¥–æ {expires}*\n\n{instructions}"

        # üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
        pkg_name = (
            "–ü–∞–∫–µ—Ç ‚Ññ1 (1 –∫–ª—é—á üîë)" if tariff == "1" else
            "–ü–∞–∫–µ—Ç ‚Ññ2 (2 –∫–ª—é—á–∞ üîëüîë)" if tariff == "2" else
            "–ü–∞–∫–µ—Ç ‚Ññ3 (3 –∫–ª—é—á–∞ üîëüîëüîë)" if tariff == "3" else
            f"–¢–∞—Ä–∏—Ñ `{tariff}`"
        )

        # üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        try:
            bot.send_message(int(user_id), msg, parse_mode="Markdown")
            print("‚úÖ –ö–ª—é—á–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            bot.send_message(call.message.chat.id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª—é—á–∏ @{identity}")

        bot.send_message(
            call.message.chat.id,
            f"üì¶ –ù–æ–≤—ã–π –ø–∞–∫–µ—Ç –¥–ª—è `{identity}`\n"
            f"{pkg_name}\n"
            f"üîê –ö–ª—é—á–µ–π: `{count}`\n"
            f"üìÜ –î–æ: `{expires}`\n"
            f"üóÇ –í—Å–µ–≥–æ –ø–∞–∫–µ—Ç–æ–≤: `{len(users[user_id]['packages'])}`",
            parse_mode="Markdown"
        )
        print("üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ approve_payment: {e}")
        bot.send_message(call.message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ù–∞–ø–∏—à–∏—Ç–µ @BlokaNet.")
        
@bot.callback_query_handler(func=lambda call: call.data.startswith("approve_new_"))
def approve_new_package(call):
    try:
        print(f"üî• –í—Ö–æ–¥ –≤ approve_new_package: {call.data}")

        user_id = call.data.split("_")[2]
        print(f"üß† user_id: {user_id}")

        chat = bot.get_chat(user_id)
        identity = chat.username or chat.first_name or chat.last_name or f"user_{user_id}"
        print(f"üß† –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {identity}")

        users = load_user_data()
        selected_tariff = users.get(user_id, {}).get("tariff_temp", "1")
        print(f"üß† –í—ã–±—Ä–∞–Ω —Ç–∞—Ä–∏—Ñ: {selected_tariff}")

        key_count = 3 if selected_tariff == "3" else 2 if selected_tariff == "2" else 1
        print(f"üß† –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π: {key_count}")

        generated_keys = generate_vpn_keys(key_count)
        print(f"üß† –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∫–ª—é—á–µ–π: {len(generated_keys)} ‚Üí {generated_keys}")

        if not generated_keys:
            bot.send_message(call.message.chat.id, f"‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–ª—é—á–µ–π –¥–ª—è @{user_id}.")
            print(f"‚ùå –ö–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return

        # üì¶ –ù–æ–≤—ã–π VPN-–ø–∞–∫–µ—Ç
        new_package = {
            "tariff": selected_tariff,
            "expires": (datetime.now() + timedelta(days=30)).strftime("%Y-%m-%d"),
            "vless": generated_keys
        }

        # üìò –û–±–Ω–æ–≤–∏–º payments.json
        payments_log = "/root/payments/payments.json"
        entry = {
            "user_id": user_id,
            "username": identity,
            "type": "purchase",
            "status": "approved",
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }

        try:
            payments = []
            if os.path.exists(payments_log):
                with open(payments_log, "r", encoding="utf-8") as f:
                    payments = json.load(f)
            payments.append(entry)
            with open(payments_log, "w", encoding="utf-8") as f:
                json.dump(payments[-1000:], f, indent=2, ensure_ascii=False)
            print("üìò payments.json –æ–±–Ω–æ–≤–ª—ë–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ payments.json: {e}")

        # ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º user_keys.json
        users.setdefault(user_id, {})["username"] = identity
        users.setdefault(user_id, {}).setdefault("packages", []).append(new_package)
        users[user_id]["purchase_mode"] = ""
        users[user_id]["tariff_temp"] = ""
        save_user_data(users)
        print(f"‚úÖ –ù–æ–≤—ã–π –ø–∞–∫–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è {user_id}")

        # üìò –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        instructions = (
            "üìò *–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è:*\n"
            "1Ô∏è‚É£ –°–∫–∞—á–∞–π—Ç–µ *Amnezia VPN*\n"
            "2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ *Let's get started*\n"
            "3Ô∏è‚É£ –í—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á\n"
            "4Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ *Connect*\n\n"
            "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @BlokaNet"
        )

        # üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ –ø–æ —Ç–∞—Ä–∏—Ñ—É
        pkg_name = (
            "–ü–∞–∫–µ—Ç ‚Ññ1 (1 –∫–ª—é—á üîë)" if selected_tariff == "1" else
            "–ü–∞–∫–µ—Ç ‚Ññ2 (2 –∫–ª—é—á–∞ üîëüîë)" if selected_tariff == "2" else
            "–ü–∞–∫–µ—Ç ‚Ññ3 (3 –∫–ª—é—á–∞ üîëüîëüîë)" if selected_tariff == "3" else
            f"–¢–∞—Ä–∏—Ñ `{selected_tariff}`"
        )

        # üì© –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª—é—á–µ–π –∫–ª–∏–µ–Ω—Ç—É
        message_text = (
            f"üéâ *{pkg_name} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!*\n\n"
            f"üì¶ –¢–∞—Ä–∏—Ñ: `{selected_tariff}`\n"
            f"üóì –°—Ä–æ–∫: 30 –¥–Ω–µ–π\n\n"
            f"üîë *–ö–ª—é—á–∏:*\n\n"
        )
        for idx, link in enumerate(generated_keys, start=1):
            message_text += f"üîë –ö–ª—é—á ‚Ññ{idx}:\n`{link}`\n\n"

        message_text += instructions

        bot.send_message(int(user_id), message_text, parse_mode="Markdown")
        print(f"üì© –ö–ª—é—á–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

        bot.send_message(call.message.chat.id, f"‚úÖ {pkg_name} –≤—ã–¥–∞–Ω @{identity}", parse_mode="Markdown")
        print(f"üì© –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É")
        print("‚úÖ approve_new_package –∑–∞–≤–µ—Ä—à—ë–Ω")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ approve_new_package: {e}")
        bot.send_message(call.message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∫–ª—é—á–µ–π.")
        

    
@bot.callback_query_handler(func=lambda call: call.data.startswith("reject"))
def reject_payment(call):
    try:
        print(f"‚õîÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {call.data}")
        
        # üß† –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ call.data ‚Äî –∏—â–µ–º –ª—é–±–æ–µ —á–∏—Å–ª–æ ‚â• 6 —Å–∏–º–≤–æ–ª–æ–≤
        import re
        match = re.search(r"_([0-9]{6,})", call.data)
        user_id = match.group(1) if match else None

        if not user_id:
            bot.send_message(call.message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        users = load_user_data()
        identity = users.get(user_id, {}).get("username") or user_id
        now = datetime.now()

        # üí¨ –ö–ª–∏–µ–Ω—Ç—É
        bot.send_message(
            int(user_id),
            "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ *–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞*.\n\n"
            "üö´ –ü—Ä–∏—á–∏–Ω—ã:\n"
            "- –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∫—Ä–∏–Ω\n"
            "- –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n\n"
            "–ï—Å–ª–∏ —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤—Å—ë –≤–µ—Ä–Ω–æ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ: @BlokaNet",
            parse_mode="Markdown"
        )

        # üë§ –ê–¥–º–∏–Ω—É
        bot.send_message(
            call.message.chat.id,
            f"‚õîÔ∏è –ó–∞—è–≤–∫–∞ –æ—Ç @{identity} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.",
            parse_mode="Markdown"
        )

        # üìù meta.json ‚Üí —Å—Ç–∞—Ç—É—Å "rejected"
        folder = f"/root/payments/logs/{now.strftime('%Y-%m')}/{now.strftime('%d')}/{identity}"
        meta_path = os.path.join(folder, "meta.json")
        try:
            if os.path.exists(meta_path):
                with open(meta_path, "r", encoding="utf-8") as f:
                    meta = json.load(f)
                if meta:
                    meta[-1]["status"] = "rejected"
                    with open(meta_path, "w", encoding="utf-8") as f:
                        json.dump(meta, f, indent=2, ensure_ascii=False)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ meta.json: {e}")

        # üßæ payments.json ‚Üí —Å—Ç–∞—Ç—É—Å "rejected"
        payments_path = "/root/payments/payments.json"
        try:
            payments = []
            if os.path.exists(payments_path):
                with open(payments_path, "r", encoding="utf-8") as f:
                    payments = json.load(f)
            for p in reversed(payments):
                if p["user_id"] == user_id and p["status"] == "pending":
                    p["status"] = "rejected"
                    break
            with open(payments_path, "w", encoding="utf-8") as f:
                json.dump(payments, f, indent=2, ensure_ascii=False)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ payments.json: {e}")

        print(f"‚õîÔ∏è –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {user_id}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ reject_payment: {e}")
        bot.send_message(call.message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏. –ù–∞–ø–∏—à–∏—Ç–µ @BlokaNet.")

@bot.message_handler(func=lambda msg: msg.text == "üìò FAQ")
def show_faq(message):
    faq_text = (
        "üìò *FAQ ‚Äî —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:*\n\n"

        "**‚Äî –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø‚ùì**\n"
        "üëâ –ù–∞–∂–º–∏—Ç–µ ¬´–ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø¬ª, –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ *—É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É*, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω.\n\n"

        "**‚Äî –°—Ä–æ–∫ –∫–ª—é—á–∞‚ùì**\n"
        "‚è≥ 30 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.\n\n"

        "**‚Äî –ö–∞–∫ —É–∑–Ω–∞—Ç—å, –∫–æ–≥–¥–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç‚ùì**\n"
        "üìÜ –ë–æ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç –∑–∞ 3 –¥–Ω—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è.\n\n"

        "**‚Äî –ö–∞–∫ –ø—Ä–æ–¥–ª–∏—Ç—å‚ùì**\n"
        "üîÅ –ù–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø¬ª, –æ–ø–ª–∞—Ç–∏—Ç–µ, –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ.\n\n"

        "**‚Äî –°–∫–æ–ª—å–∫–æ –ø–∞–∫–µ—Ç–æ–≤ —è –º–æ–≥—É –∫—É–ø–∏—Ç—å‚ùì**\n"
        "üì¶ –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ *3 –ø–∞–∫–µ—Ç–∞*:\n"
        "- –ü–∞–∫–µ—Ç ‚Ññ1 ‚Äî 1 –∫–ª—é—á\n"
        "- –ü–∞–∫–µ—Ç ‚Ññ2 ‚Äî 2 –∫–ª—é—á–∞\n"
        "- –ü–∞–∫–µ—Ç ‚Ññ3 ‚Äî 3 –∫–ª—é—á–∞\n\n"
        "‚úÖ –ú–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å —Å—Ä–∞–∑—É –≤—Å–µ —Ç—Ä–∏. –ö–∞–∂–¥—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ.\n"
        "üìå –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å –Ω—É–∂–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –∏—Ö –ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å.\n"
        "üéØ –•–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ? –ö—É–ø–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞–∫–µ—Ç –∏ –ø—Ä–æ–¥–ª–µ–≤–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –µ–≥–æ.\n\n"

        "**‚Äî –ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ‚ùì**\n"
        "üîí VPN –º–æ–∂–µ—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Å–º–µ–Ω—É IP, –µ—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç–µ—Å—å –º–µ–∂–¥—É Wi-Fi –∏ –º–æ–±–∏–ª—å–Ω–æ–π —Å–≤—è–∑—å—é.\n"
        "üïí –≠—Ç–æ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –∫–∞–∫ –º—É–ª—å—Ç–∏-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, –∏ –¥–æ—Å—Ç—É–ø –≤—Ä–µ–º–µ–Ω–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è ‚Äî –Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.\n\n"
        "üìå –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–¥–æ–±–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n"
        "- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–Ω—É —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Å–µ—Ç—å: Wi-Fi *–∏–ª–∏* –º–æ–±–∏–ª—å–Ω—É—é\n"
        "- –û—Ç–∫–ª—é—á–∏—Ç–µ –≤—Ç–æ—Ä—É—é —Å–µ—Ç—å, –µ—Å–ª–∏ –∑–∞–º–µ—á–∞–µ—Ç–µ –ø–µ—Ä–µ–±–æ–∏\n\n"
        "üí¨ –†–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫–ª—é—á–∞ –ø—Ä–∏ —ç—Ç–æ–º –Ω–µ —Å—Ç—Ä–∞–¥–∞–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω—É–∂–Ω–æ –¥–æ–∂–¥–∞—Ç—å—Å—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.\n\n"

        "**‚Äî –ì–¥–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Å–µ—Ä–≤–µ—Ä—ã‚ùì**\n"
        "üåç –°–µ–π—á–∞—Å ‚Äî –ì–µ—Ä–º–∞–Ω–∏—è. –í –±—É–¥—É—â–µ–º ‚Äî –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω—ã.\n\n"

        "**‚Äî –ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ‚ùì**\n"
        "üì© –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @BlokaNet"
    )

    bot.send_message(message.chat.id, faq_text, parse_mode="Markdown")

@bot.message_handler(func=lambda msg: msg.text == "üìú –ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
def show_rules(message):
    rules_text = (
        "üìú *–ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:*\n\n"
        "1Ô∏è‚É£ –û–¥–∏–Ω –∫–ª—é—á ‚Äî –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ–¥–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.\n"
        "2Ô∏è‚É£ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞.\n"
        "3Ô∏è‚É£ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–Ω–∏–º–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ IP.\n"
        "4Ô∏è‚É£ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º –¥–æ—Å—Ç—É–ø–∞.\n\n"
        "‚ö†Ô∏è –ù–∞—Ä—É—à–µ–Ω–∏–µ ‚Äî –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –±–µ–∑ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏.\n"
        "üí¨ –í–æ–ø—Ä–æ—Å—ã? ‚Üí @BlokaNet"
    )
    bot.send_message(message.chat.id, rules_text, parse_mode="Markdown")

@bot.message_handler(commands=["admin"])
def admin_panel(message):
    if message.from_user.id != OWNER_ID:
        bot.send_message(message.chat.id, "‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    users = load_user_data()
    total_keys = len(load_keys())
    used_keys = sum(len(pkg.get("vless", [])) for u in users.values() for pkg in u.get("packages", []))
    available_keys = total_keys - used_keys

    # üß† –ü–æ–¥—Å—á—ë—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –Ω–∏–∫–∞–º
    usernames = set()
    for u in users.values():
        name = u.get("username")
        if name:
            usernames.add(name)
    real_users = len(usernames)

    report = (
        f"üîê *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å BlokaNet*\n\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: `{real_users}`\n"
        f"üîë –í—Å–µ–≥–æ –∫–ª—é—á–µ–π: `{total_keys}`\n"
        f"üì§ –í—ã–¥–∞–Ω–æ: `{used_keys}`\n"
        f"üü¢ –û—Å—Ç–∞–ª–æ—Å—å: `{available_keys}`"
    )
    bot.send_message(message.chat.id, report, parse_mode="Markdown")

@bot.message_handler(commands=["profile"])
def user_profile(message):
    user_id = str(message.from_user.id)
    users = load_user_data()

    if user_id not in users or not users[user_id].get("packages"):
        bot.send_message(
            message.chat.id,
            "üîê –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö VPN-–ø–∞–∫–µ—Ç–æ–≤.\n–ù–∞–∂–º–∏—Ç–µ ¬´–ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø¬ª.",
            parse_mode="Markdown"
        )
        return

    now = datetime.now()

    for i, pkg in enumerate(users[user_id]["packages"]):
        tariff = pkg.get("tariff", "1")

        # üéÅ –ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø: –∫—Ä–∞—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç —Å –¥–∞—Ç–æ–π –∏ —Å—Ç–∞—Ç—É—Å–æ–º
        if tariff == "trial":
            trial_key = pkg.get("vless", ["‚Äî –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî"])[0]
            expires = pkg.get("expires", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")

            try:
                exp = datetime.strptime(expires, "%Y-%m-%d")
                status = "‚úÖ –∞–∫—Ç–∏–≤–µ–Ω" if exp >= now else "üïí –∏—Å—Ç—ë–∫"
            except:
                status = "‚ùì –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

            trial_text = (
                "üéÅ –¢–∞—Ä–∏—Ñ: *Trial*\n"
                f"üìÜ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: `{expires}`\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {status}\n\n"
                f"üîë –ö–ª—é—á:\n`{trial_key}`"
            )

            bot.send_message(message.chat.id, trial_text, parse_mode="Markdown")
            continue

        # üì¶ –ü–ª–∞—Ç–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
        pkg_number = i + 1
        expires = pkg.get("expires", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")

        try:
            exp = datetime.strptime(expires, "%Y-%m-%d")
            status = "‚úÖ –∞–∫—Ç–∏–≤–µ–Ω" if exp >= now else "üïí –∏—Å—Ç—ë–∫"
        except:
            status = "‚ùì –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

        vless_list = pkg.get("vless", [])

        name = (
            "–ü–∞–∫–µ—Ç ‚Ññ1 (1 –∫–ª—é—á üîë)" if tariff == "1" else
            "–ü–∞–∫–µ—Ç ‚Ññ2 (2 –∫–ª—é—á–∞ üîëüîë)" if tariff == "2" else
            "–ü–∞–∫–µ—Ç ‚Ññ3 (3 –∫–ª—é—á–∞ üîëüîëüîë)" if tariff == "3" else
            f"–¢–∞—Ä–∏—Ñ `{tariff}`"
        )

        text = (
            f"{name}\n"
            f"üì¶ –ü–∞–∫–µ—Ç #{pkg_number}\n"
            f"üîê –ö–ª—é—á–µ–π: `{len(vless_list)}`\n"
            f"üìÜ –°—Ä–æ–∫: `{expires}`\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status}\n\n"
            f"üîë *–ö–ª—é—á–∏:*\n\n"
        )

        for idx, link in enumerate(vless_list, start=1):
            text += f"üîë –ö–ª—é—á ‚Ññ{idx}:\n`{link}`\n\n"

        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton(
                "üîÅ –ü—Ä–æ–¥–ª–∏—Ç—å",
                callback_data=f"extend_confirm_{user_id}_{i}"
            )
        )

        bot.send_message(message.chat.id, text, parse_mode="Markdown", reply_markup=markup)
# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
print("üü¢ Polling –∑–∞–ø—É—â–µ–Ω")


bot.infinity_polling()
